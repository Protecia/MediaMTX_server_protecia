name: CI - Build, Push and Deploy Docker Image

on:
  push:
    branches: ["main" ]
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened]
  release:
    types: [published]

jobs:
  check_files_changed:
    name: "Check changes"
    runs-on: ubuntu-latest
    # Declare outputs for next jobs
    outputs:
      deploy_changed: ${{ steps.changed-files-specific.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v3
        with:
          # Checkout as many commits as needed for the diff
          fetch-depth: 0
      - name: Check if any file in deploy directory has changed
        id: changed-files-specific
        uses: tj-actions/changed-files@v34
        with:
          files: |
            deploy/** 

  prepare:
    name: "Prepare code"
    runs-on: ubuntu-latest
    needs: check_files_changed
    if: needs.check_files_changed.outputs.deploy_changed == 'true' && github.event_name != 'release' || github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set variables for push
        if: github.event_name == 'push'
        run: |
          echo "DEPLOY_ENV=re7" > version.env
          echo "IMAGE_TAG=${{ github.sha }}" >> version.env
      - name: Set variables for pull request
        if: github.event_name == 'pull_request'
        run: |
          echo "DEPLOY_ENV=re7" > version.env
          echo "IMAGE_TAG=${{ github.sha }}" >> version.env
      - name: Set variables for release
        if: github.event_name == 'release'
        run: |
          echo "DEPLOY_ENV=prod" > version.env
          echo "IMAGE_TAG=${{ github.event.release.tag_name }}" >> version.env
      - name: Upload code as artifact
        uses: actions/upload-artifact@v4
        with:
          name: code
          path: |
            .

  build-and-push:
    name: "Make Docker images"
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Download code artifact
        uses: actions/download-artifact@v4
        with:
          name: code
          path: .
      - name: Set IMAGE_TAG from version.env
        id: set-image-tag
        run: |
          source version.env
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
      - name: Login to Scaleway container Registry
        uses: docker/login-action@v2
        with:
          registry: rg.fr-par.scw.cloud
          username: nologin
          password: ${{ secrets.SCW_SECRET_KEY }}
      - name: Build Docker image
        run: docker build -f deploy/Dockerfile -t rg.fr-par.scw.cloud/protecia/mediamtx:${{ env.IMAGE_TAG }} .
      - name: Push Docker image
        run: docker push rg.fr-par.scw.cloud/protecia/mediamtx:${{ env.IMAGE_TAG }}

  deploy:
    name: "Deploy on OVH"
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Download code artifact
        uses: actions/download-artifact@v4
        with:
          name: code
          path: .
      - name: Set vars from version.env
        run: |
          source version.env
          echo "SSH_KEY_SECRET=ssh-key-${DEPLOY_ENV}" >> $GITHUB_ENV
          echo "VERSION_FILE=version-media-${DEPLOY_ENV}.env" >> $GITHUB_ENV
          echo "SECRET_FILE=secret-media-${DEPLOY_ENV}.env" >> $GITHUB_ENV
          echo "COMPOSE_FILE=docker-compose-media-${DEPLOY_ENV}.yaml" >> $GITHUB_ENV
          echo "MTX_CONF_FILE=mediamtx-${DEPLOY_ENV}.yaml" >> $GITHUB_ENV
      - name: Get scaleways secrets using scaleways credential
        uses: scaleway/action-scw-secret@v0
        with:
          secret-names: |
            /protecia-server/server-connect
            /protecia-server/${{ env.SSH_KEY_SECRET }}
          access-key: ${{ secrets.SCW_ACCESS_KEY }}
          secret-key: ${{ secrets.SCW_SECRET_KEY }}
          default-project-id: ${{ secrets.SCW_DEFAULT_PROJECT_ID }}
          default-organization-id: ${{ secrets.SCW_DEFAULT_ORGANIZATION_ID }}
      - name: Set vars from scaleway
        run: |
          source version.env
          # Get ssh parameters from scaleway secrets
          SSH_HOST=$(echo "$SECRET_CONNECT" | jq -r ".SSH_HOST_${DEPLOY_ENV^^}")
          SSH_USER=$(echo "$SECRET_CONNECT" | jq -r ".SSH_USER_${DEPLOY_ENV^^}")
          SSH_PORT=$(echo "$SECRET_CONNECT" | jq -r ".SSH_PORT_${DEPLOY_ENV^^}")
          declare -n SSH_KEY_JSON="SSH_KEY_${DEPLOY_ENV^^}"
          SSH_KEY=$(echo "$SSH_KEY_JSON" | jq -r ".ssh_private_key")
          # export variables to be used in next steps
          echo "SSH_HOST=$SSH_HOST" >> $GITHUB_ENV
          echo "SSH_USER=$SSH_USER" >> $GITHUB_ENV
          echo "SSH_PORT=$SSH_PORT" >> $GITHUB_ENV
          echo "$SSH_KEY" > ssh_key
      - name: Set specific secret for project in ${{ env.SECRET_FILE }}
        run: |
          source version.env
          cp version.env ${{ env.VERSION_FILE }}
          # Get secret parameters from scaleway secrets
          MTX_ADMIN_PASS=$(jq -r ".MTX_ADMIN_PASS_${DEPLOY_ENV^^}" <<<"$SECRET_CONNECT")
          # export variables to file
          echo "MTX_ADMIN_PASS=$MTX_ADMIN_PASS" > ${{ env.SECRET_FILE }}
      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key_path: ./ssh_key
          source: >
            ./deploy/${{ env.COMPOSE_FILE }},
            ./${{ env.VERSION_FILE }},
            ./${{ env.SECRET_FILE }},
            ./deploy/start_remote_media.sh,
            ./deploy/start_remote_media_no_daemon.sh,
            ./deploy/stop_remote_media.sh,
            ./deploy/${{ env.MTX_CONF_FILE }}
          target: /home/protecia/
          port: ${{ env.SSH_PORT }}
          overwrite: true

      - name: Start docker compose
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key_path: ./ssh_key
          port: ${{ env.SSH_PORT }}
          script: |
            docker login rg.fr-par.scw.cloud/protecia -u nologin --password ${{ secrets.SCW_SECRET_KEY }}
            source ${{ env.VERSION_FILE }}
            cat ${{ env.SECRET_FILE }} ${{ env.VERSION_FILE }} > combined-$DEPLOY_ENV.env
            cd deploy
            bash start_remote.sh $DEPLOY_ENV
